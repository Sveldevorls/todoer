/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodayRouteImport } from './routes/today'
import { Route as OngoingRouteImport } from './routes/ongoing'
import { Route as FinishedRouteImport } from './routes/finished'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TasksIndexRouteImport } from './routes/tasks/index'
import { Route as GroupsIndexRouteImport } from './routes/groups/index'
import { Route as TasksTaskIDRouteImport } from './routes/tasks/$taskID'
import { Route as GroupsGroupIDRouteImport } from './routes/groups/$groupID'

const TodayRoute = TodayRouteImport.update({
  id: '/today',
  path: '/today',
  getParentRoute: () => rootRouteImport,
} as any)
const OngoingRoute = OngoingRouteImport.update({
  id: '/ongoing',
  path: '/ongoing',
  getParentRoute: () => rootRouteImport,
} as any)
const FinishedRoute = FinishedRouteImport.update({
  id: '/finished',
  path: '/finished',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupsIndexRoute = GroupsIndexRouteImport.update({
  id: '/groups/',
  path: '/groups/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTaskIDRoute = TasksTaskIDRouteImport.update({
  id: '/tasks/$taskID',
  path: '/tasks/$taskID',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupsGroupIDRoute = GroupsGroupIDRouteImport.update({
  id: '/groups/$groupID',
  path: '/groups/$groupID',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/finished': typeof FinishedRoute
  '/ongoing': typeof OngoingRoute
  '/today': typeof TodayRoute
  '/groups/$groupID': typeof GroupsGroupIDRoute
  '/tasks/$taskID': typeof TasksTaskIDRoute
  '/groups': typeof GroupsIndexRoute
  '/tasks': typeof TasksIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/finished': typeof FinishedRoute
  '/ongoing': typeof OngoingRoute
  '/today': typeof TodayRoute
  '/groups/$groupID': typeof GroupsGroupIDRoute
  '/tasks/$taskID': typeof TasksTaskIDRoute
  '/groups': typeof GroupsIndexRoute
  '/tasks': typeof TasksIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/finished': typeof FinishedRoute
  '/ongoing': typeof OngoingRoute
  '/today': typeof TodayRoute
  '/groups/$groupID': typeof GroupsGroupIDRoute
  '/tasks/$taskID': typeof TasksTaskIDRoute
  '/groups/': typeof GroupsIndexRoute
  '/tasks/': typeof TasksIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/finished'
    | '/ongoing'
    | '/today'
    | '/groups/$groupID'
    | '/tasks/$taskID'
    | '/groups'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/finished'
    | '/ongoing'
    | '/today'
    | '/groups/$groupID'
    | '/tasks/$taskID'
    | '/groups'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/finished'
    | '/ongoing'
    | '/today'
    | '/groups/$groupID'
    | '/tasks/$taskID'
    | '/groups/'
    | '/tasks/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FinishedRoute: typeof FinishedRoute
  OngoingRoute: typeof OngoingRoute
  TodayRoute: typeof TodayRoute
  GroupsGroupIDRoute: typeof GroupsGroupIDRoute
  TasksTaskIDRoute: typeof TasksTaskIDRoute
  GroupsIndexRoute: typeof GroupsIndexRoute
  TasksIndexRoute: typeof TasksIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/today': {
      id: '/today'
      path: '/today'
      fullPath: '/today'
      preLoaderRoute: typeof TodayRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ongoing': {
      id: '/ongoing'
      path: '/ongoing'
      fullPath: '/ongoing'
      preLoaderRoute: typeof OngoingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/finished': {
      id: '/finished'
      path: '/finished'
      fullPath: '/finished'
      preLoaderRoute: typeof FinishedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/groups/': {
      id: '/groups/'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/$taskID': {
      id: '/tasks/$taskID'
      path: '/tasks/$taskID'
      fullPath: '/tasks/$taskID'
      preLoaderRoute: typeof TasksTaskIDRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/groups/$groupID': {
      id: '/groups/$groupID'
      path: '/groups/$groupID'
      fullPath: '/groups/$groupID'
      preLoaderRoute: typeof GroupsGroupIDRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FinishedRoute: FinishedRoute,
  OngoingRoute: OngoingRoute,
  TodayRoute: TodayRoute,
  GroupsGroupIDRoute: GroupsGroupIDRoute,
  TasksTaskIDRoute: TasksTaskIDRoute,
  GroupsIndexRoute: GroupsIndexRoute,
  TasksIndexRoute: TasksIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
